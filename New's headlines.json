{
  "name": "New's headlines",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        48,
        -288
      ],
      "id": "ab61994f-5ce7-42e1-a2f0-92a5b0362099",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "sendTo": "motantawy029@gmail.com",
        "subject": "={{$json[\"subject\"]}}",
        "message": "={{$json[\"bodyHtml\"]}}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1168,
        -384
      ],
      "id": "5086e63a-ef58-4286-bd1a-9c643149c311",
      "name": "Send a message",
      "webhookId": "91f8867c-cb20-4fd3-b4c3-891d2a46ecd3",
      "credentials": {
        "gmailOAuth2": {
          "id": "8NPdINHlf7wdqyXV",
          "name": "Gmail account 3"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// BuildEmail Function (produces bodyHtml, bodyText, telegramText)\nconst MAX_ARTICLES = 8;\nconst DESCRIPTION_MAX_CHARS = 200;\nconst TELEGRAM_MAX = 3800; // Ø§Ø­ØªÙŠØ§Ø·ÙŠ Ø£Ù‚Ù„ Ù…Ù† 4096 limit\n\nfunction truncate(text, n){\n  if(!text) return '';\n  return text.length > n ? text.slice(0,n).trim() + '...' : text;\n}\nfunction stripHtml(html){\n  return html ? html.replace(/<\\/?[^>]+(>|$)/g, \"\") : \"\";\n}\n\n// --- get weather + articles (similar robust logic as before) ---\nlet weatherJson = null;\nfor (const it of items) {\n  if (it.json && it.json.main && (it.json.main.temp !== undefined || it.json.weather)) {\n    weatherJson = it.json;\n    break;\n  }\n}\n\nlet articles = [];\nfor (const it of items) {\n  if (it.json && Array.isArray(it.json.articles)) {\n    articles = it.json.articles;\n    break;\n  }\n}\nif (!articles.length) {\n  const cand = items.map(i => i.json).filter(j => j && (j.title || j.url || j.description));\n  if (cand.length) articles = cand;\n}\nif (!Array.isArray(articles)) articles = [];\nif (MAX_ARTICLES && articles.length > MAX_ARTICLES) articles = articles.slice(0, MAX_ARTICLES);\n\n// Weather fields\nconst displayCity = \"Alexandria, Egypt\";\nlet temp = null;\nlet weatherDesc = '';\nif (weatherJson) {\n  temp = (weatherJson.main && weatherJson.main.temp !== undefined) ? weatherJson.main.temp : null;\n  weatherDesc = (weatherJson.weather && weatherJson.weather[0] && weatherJson.weather[0].description) ? weatherJson.weather[0].description : '';\n}\n\n// Build HTML body\nlet bodyHtml = `\n  <div style=\"font-family:Arial, Helvetica, sans-serif; color:#111;\">\n    <h1 style=\"margin-bottom:6px;\">ðŸ“© Daily Summary â€” ${displayCity}</h1>\n    <div style=\"color:#666; margin-bottom:12px;\">${new Date().toLocaleString(\"en-GB\", {timeZone:\"Africa/Cairo\"})}</div>\n\n    <h2 style=\"margin-bottom:8px;\">ðŸŒ¤ Weather</h2>\n    <div style=\"margin-bottom:14px; color:#333;\">\n      ${temp !== null ? `<strong style=\"font-size:18px;\">${temp}Â°C</strong> â€” ${weatherDesc}` : `Weather data unavailable`}\n    </div>\n\n    <h2 style=\"margin-top:6px;\">ðŸ“° Top News</h2>\n    <div style=\"margin-bottom:8px; color:#666;\">Showing ${articles.length} item(s)</div>\n    <div style=\"border-top:1px solid #eee; padding-top:8px;\">\n`;\n\nfor (let a of articles) {\n  const title = a.title || a.headline || 'No title';\n  const url = a.url || a.link || '#';\n  const desc = a.description || a.summary || '';\n  const shortDesc = truncate(desc, DESCRIPTION_MAX_CHARS);\n  bodyHtml += `\n    <div style=\"padding:10px 0; border-bottom:1px dashed #e7e7e7;\">\n      <a href=\"${url}\" target=\"_blank\" style=\"font-weight:600; color:#0b63ce; text-decoration:none; font-size:15px;\">\n        ${title}\n      </a>\n      ${shortDesc ? `<div style=\"margin-top:8px; color:#333; font-size:14px;\">${shortDesc}</div>` : ''}\n    </div>\n  `;\n}\n\nbodyHtml += `\n    </div>\n    <hr style=\"border:none; border-top:1px solid #efefef; margin-top:12px;\" />\n    <div style=\"color:#999; font-size:12px; margin-top:8px;\">Generated by your n8n workflow</div>\n  </div>\n`;\n\n// Plain text fallback\nconst bodyText = stripHtml(bodyHtml);\n\n// Prepare telegramText: short header + truncated list with links (Telegram doesn't support full HTML reliably)\nlet telegramText = `Daily Summary â€” ${displayCity}\\n${new Date().toLocaleDateString('en-GB')} \\n\\n`;\ntelegramText += (temp !== null) ? `Weather: ${temp}Â°C â€” ${weatherDesc}\\n\\n` : `Weather data unavailable\\n\\n`;\ntelegramText += `Top News (${articles.length}):\\n`;\n\nfor (let a of articles) {\n  const title = a.title ? stripHtml(a.title) : 'No title';\n  const url = a.url || a.link || '';\n  telegramText += `â€¢ ${title}${url ? `\\n  ${url}` : ''}\\n\\n`;\n}\n\n// truncate telegram text if too long\nif (telegramText.length > TELEGRAM_MAX) {\n  telegramText = telegramText.slice(0, TELEGRAM_MAX).trim() + '\\n\\n(â€¦truncated)';\n}\n\nconst subject = `Daily Summary â€” ${displayCity} â€” ${new Date().toLocaleDateString()}`;\n\nreturn [{ json: { subject, bodyHtml, bodyText, telegramText } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        -288
      ],
      "id": "25461a10-219e-467a-9acb-fad1ca576e8d",
      "name": "BuildEmail (Function)"
    },
    {
      "parameters": {
        "url": "https://api.openweathermap.org/data/2.5/weather",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "{\n  \"q\": \"Alexandria,eg\",\n  \"appid\": \"ed35c3f3fccd252c5e86d449a4852d88\",\n  \"units\": \"metric\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        496,
        -384
      ],
      "id": "d1398a78-632d-4886-b90e-e71f8de0e48c",
      "name": "OpenWeather Request node"
    },
    {
      "parameters": {
        "url": "https://newsapi.org/v2/top-headlines?country=us&apiKey=31bd5baa03d148eb9c3b77a8834227cd",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        496,
        -192
      ],
      "id": "f2181cce-70c5-41a8-accc-ca588da65c55",
      "name": "News API Node"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        720,
        -288
      ],
      "id": "2a6266bf-7123-499f-a032-50ee6544f7af",
      "name": "Merge"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        272,
        -288
      ],
      "id": "b72fdea7-54fa-4f9b-b4a2-07012799ec41",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "chatId": "716954554",
        "text": "={{$json[\"telegramText\"]}}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1168,
        -192
      ],
      "id": "099010a2-3fc2-4c9a-9cb5-2588ac934e5a",
      "name": "Send a text message",
      "webhookId": "594ebdd1-8722-4451-98f9-b329302ffb18",
      "credentials": {
        "telegramApi": {
          "id": "umvOayMPhLQtzy5p",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BuildEmail (Function)": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenWeather Request node": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "News API Node": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "BuildEmail (Function)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "OpenWeather Request node",
            "type": "main",
            "index": 0
          },
          {
            "node": "News API Node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Africa/Cairo",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "e6719845-90c3-40a9-a303-69f9b89498b7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e347b1ce67d1ab9d804b45ed6c9976134e5a723bb55f2f67320d44667b3c64bd"
  },
  "id": "PaVh5CYlAzmoQiLg",
  "tags": []
}